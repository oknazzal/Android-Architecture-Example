// Generated by Dagger (https://dagger.dev).
package com.oknazzal.architecture.example.feature.authentication.presentation.login;

import com.oknazzal.architecture.example.feature.authentication.domain.usecase.local.LoginUseCase;
import com.oknazzal.architecture.example.feature.authentication.domain.usecase.validation.IsValidLoginFormUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginViewModel_Factory implements Factory<LoginViewModel> {
  private final Provider<IsValidLoginFormUseCase> isValidLoginFormUseCaseProvider;

  private final Provider<LoginUseCase> loginUseCaseProvider;

  public LoginViewModel_Factory(Provider<IsValidLoginFormUseCase> isValidLoginFormUseCaseProvider,
      Provider<LoginUseCase> loginUseCaseProvider) {
    this.isValidLoginFormUseCaseProvider = isValidLoginFormUseCaseProvider;
    this.loginUseCaseProvider = loginUseCaseProvider;
  }

  @Override
  public LoginViewModel get() {
    return newInstance(isValidLoginFormUseCaseProvider.get(), loginUseCaseProvider.get());
  }

  public static LoginViewModel_Factory create(
      Provider<IsValidLoginFormUseCase> isValidLoginFormUseCaseProvider,
      Provider<LoginUseCase> loginUseCaseProvider) {
    return new LoginViewModel_Factory(isValidLoginFormUseCaseProvider, loginUseCaseProvider);
  }

  public static LoginViewModel newInstance(IsValidLoginFormUseCase isValidLoginFormUseCase,
      LoginUseCase loginUseCase) {
    return new LoginViewModel(isValidLoginFormUseCase, loginUseCase);
  }
}
