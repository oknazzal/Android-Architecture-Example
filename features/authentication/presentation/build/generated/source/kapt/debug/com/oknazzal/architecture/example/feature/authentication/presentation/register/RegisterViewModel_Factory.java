// Generated by Dagger (https://dagger.dev).
package com.oknazzal.architecture.example.feature.authentication.presentation.register;

import com.oknazzal.architecture.example.feature.authentication.domain.usecase.local.RegisterUseCase;
import com.oknazzal.architecture.example.feature.authentication.domain.usecase.validation.IsValidRegisterFormUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RegisterViewModel_Factory implements Factory<RegisterViewModel> {
  private final Provider<IsValidRegisterFormUseCase> isValidRegisterFormUseCaseProvider;

  private final Provider<RegisterUseCase> registerUseCaseProvider;

  public RegisterViewModel_Factory(
      Provider<IsValidRegisterFormUseCase> isValidRegisterFormUseCaseProvider,
      Provider<RegisterUseCase> registerUseCaseProvider) {
    this.isValidRegisterFormUseCaseProvider = isValidRegisterFormUseCaseProvider;
    this.registerUseCaseProvider = registerUseCaseProvider;
  }

  @Override
  public RegisterViewModel get() {
    return newInstance(isValidRegisterFormUseCaseProvider.get(), registerUseCaseProvider.get());
  }

  public static RegisterViewModel_Factory create(
      Provider<IsValidRegisterFormUseCase> isValidRegisterFormUseCaseProvider,
      Provider<RegisterUseCase> registerUseCaseProvider) {
    return new RegisterViewModel_Factory(isValidRegisterFormUseCaseProvider, registerUseCaseProvider);
  }

  public static RegisterViewModel newInstance(IsValidRegisterFormUseCase isValidRegisterFormUseCase,
      RegisterUseCase registerUseCase) {
    return new RegisterViewModel(isValidRegisterFormUseCase, registerUseCase);
  }
}
