// Generated by Dagger (https://dagger.dev).
package com.oknazzal.architecture.example.feature.authentication.domain.usecase.validation;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class IsValidLoginFormUseCase_Factory implements Factory<IsValidLoginFormUseCase> {
  private final Provider<IsValidPasswordUseCase> isValidPasswordUseCaseProvider;

  private final Provider<IsValidEmailUseCase> isValidEmailUseCaseProvider;

  public IsValidLoginFormUseCase_Factory(
      Provider<IsValidPasswordUseCase> isValidPasswordUseCaseProvider,
      Provider<IsValidEmailUseCase> isValidEmailUseCaseProvider) {
    this.isValidPasswordUseCaseProvider = isValidPasswordUseCaseProvider;
    this.isValidEmailUseCaseProvider = isValidEmailUseCaseProvider;
  }

  @Override
  public IsValidLoginFormUseCase get() {
    return newInstance(isValidPasswordUseCaseProvider.get(), isValidEmailUseCaseProvider.get());
  }

  public static IsValidLoginFormUseCase_Factory create(
      Provider<IsValidPasswordUseCase> isValidPasswordUseCaseProvider,
      Provider<IsValidEmailUseCase> isValidEmailUseCaseProvider) {
    return new IsValidLoginFormUseCase_Factory(isValidPasswordUseCaseProvider, isValidEmailUseCaseProvider);
  }

  public static IsValidLoginFormUseCase newInstance(IsValidPasswordUseCase isValidPasswordUseCase,
      IsValidEmailUseCase isValidEmailUseCase) {
    return new IsValidLoginFormUseCase(isValidPasswordUseCase, isValidEmailUseCase);
  }
}
